import React, {useRef, useState} from 'react';import ReactPlayer from 'react-player'import './createTopicStyle.css'import {Button} from "react-bootstrap";import {TiDeleteOutline} from "react-icons/ti";import http from "../../plugins/http";import {useNavigate} from "react-router-dom";const CreateTopic = () => {    const nav = useNavigate()    const titleRef = useRef()    const descriptionRef = useRef()    const photoRef = useRef()    const [photos, setPhotos] = useState([]);    const [status, setStatus] = useState(null)    const [photoClass, setPhotoClass] = useState("form-control")    const [validationTitle, setValidationTitle] = useState("validationMessageHidden")    const [validationDescription, setValidationDescription] = useState("validationMessageHidden")    const [validationImage, setValidationImage] = useState('validationMessageHidden')    function photoValidation() {        if (!photoRef.current.value.includes('http')) {            photoRef.current.value = ''            setValidationImage("validationError")            return setPhotoClass("form-control is-invalid")        }    }    function previewPicture() {        if (photoRef.current.value.includes('http')) {            setPhotoClass("form-control")            setValidationImage("validationMessageHidden")            setPhotos([...photos, photoRef.current.value])            photoRef.current.value = ''        }    }    function deletePicture(index) {        const arr = photos.filter((photo, i) => i !== index)        setPhotoClass("form-control")        return setPhotos(arr)    }    function topicValidation() {        if (4 > titleRef.current.value.length || titleRef.current.value.length > 80) {            return setValidationTitle("validationError")        } else {            setValidationTitle("validationMessageHidden")        }        if (20 > descriptionRef.current.value.length || descriptionRef.current.value.length > 3500) {            return setValidationDescription("validationError")        } else {            setValidationDescription("validationMessageHidden")        }        uploadTopic()    }    async function uploadTopic() {        const topic = {            title: titleRef.current.value,            description: descriptionRef.current.value,            photos,            uploadedTopic: new Date().getTime()        }        const res = await http.post('/upload-topic', topic)        if (res.success) return nav('/')        if (!res.success) setStatus(res.message)    }    return (        <div className='d-flex align-items-center justify-content-center'>            <div className='create-topic-container'>                <p className='input-header'>Title</p>                <input                    ref={titleRef}                    className="input-styled"                    placeholder="Topic title"                />                <p className='input-header description-title'>Description</p>                <textarea name="" id="" placeholder="Topic description" ref={descriptionRef}                          className='upload-auction-textarea'/>                <div>                    <p className='input-header'>Add photos or video</p>                    <div className='d-flex flex-wrap'>                        {photos.map((photo, i) => photo.includes('youtube') ?                            <div key={i} className='d-flex'>                                <div className="upload-picture">                                    <ReactPlayer                                        url={photo}                                        width={220}                                        height={170}                                    />                                </div>                                <TiDeleteOutline onClick={() => deletePicture(i)} className='image-delete'/>                            </div> :                            <div key={i} className='d-flex'>                                <div>                                    <img className='upload-picture' src={photo} alt=""/>                                </div>                                <TiDeleteOutline onClick={() => deletePicture(i)} className='image-delete'/>                            </div>)}                    </div>                    <div className={photos.length !== 0 ? "mb-3 mt-4" : "mb-3"}>                        <div className="input-group">                            <input ref={photoRef} type="text" className={photoClass} onBlur={photoValidation}                                   placeholder="Topic image or video URL" aria-label="Username"                                   aria-describedby="basic-addon1"                                   style={{                                       backgroundColor: '#f5f8fd', fontSize: '16px'                                   }}/>                        </div>                        <Button className="w-100 mt-3 auth-btn" data-toggle="modal" data-target="#myModal"                                onClick={previewPicture} variant="primary">                            Add picture or video Url                        </Button>                    </div>                    <div>                        <Button className="w-100 mt-3 auth-btn" data-toggle="modal" data-target="#myModal"                                onClick={topicValidation} variant="primary">                            Upload Topic                        </Button>                    </div>                    <div className='text-center'>                        <p className={validationTitle}>Title should be from 4 to 80 characters.</p>                        <p className={validationDescription}>Description should be from 20 to 3500 characters.</p>                        <p className={validationImage}>Photo or video link should include "http"</p>                        <p className={'statusMessage'}>{status}</p>                    </div>                </div>            </div>        </div>    );};export default CreateTopic;